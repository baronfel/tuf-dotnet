using Serde;

namespace TUF.Models.Simple;

/// <summary>
/// Represents a unique identifier for a cryptographic key in TUF.
/// Key IDs are typically SHA-256 hashes of the canonical JSON representation of the key.
/// </summary>
/// <remarks>
/// From TUF specification section 4.2: "A key identifier is a string used to refer to a 
/// cryptographic key. It SHOULD be the hexadecimal representation of the cryptographic 
/// hash of the canonical JSON form of the key."
/// </remarks>
[GenerateSerde]
public partial record KeyId(string Value);

/// <summary>
/// Represents a cryptographic signature as a hex-encoded string.
/// Signatures are generated by signing the canonical JSON representation of metadata.
/// </summary>
/// <remarks>
/// From TUF specification section 4.3: "A signature is a string that is the hex 
/// representation of a cryptographic signature of the canonical JSON form of a 
/// metadata object."
/// </remarks>
[GenerateSerde]
public partial record Signature(string Value);

/// <summary>
/// Represents the public key value component of a TUF key.
/// The format depends on the key type (PEM for RSA/ECDSA, hex for Ed25519).
/// </summary>
/// <remarks>
/// This contains the actual cryptographic material used for signature verification.
/// The format varies by key type:
/// - Ed25519: Hex-encoded 32-byte public key
/// - RSA: PEM-encoded public key (minimum 2048 bits)
/// - ECDSA: PEM-encoded public key using NIST P-256 curve
/// </remarks>
[GenerateSerde]
public partial record KeyValue
{
    /// <summary>
    /// The public key material in the appropriate format for the key type.
    /// </summary>
    [property: SerdeMemberOptions(Rename = "public")]
    public string Public { get; init; } = "";
}

/// <summary>
/// Represents a complete cryptographic key definition in TUF metadata.
/// Contains the key type, cryptographic scheme, and public key material.
/// </summary>
/// <remarks>
/// From TUF specification section 4.2: "A key is a dictionary that contains the 
/// public portion of a signing key. It contains a type field that describes the 
/// cryptographic signature scheme, a scheme field that describes the signature 
/// scheme, and a keyval field that contains the public key."
/// </remarks>
[GenerateSerde]
public partial record Key
{
    /// <summary>
    /// The type of cryptographic key (e.g., "rsa", "ed25519", "ecdsa").
    /// </summary>
    /// <remarks>
    /// Supported key types per TUF specification:
    /// - "rsa": RSA keys (minimum 2048 bits)
    /// - "ed25519": Ed25519 elliptic curve keys
    /// - "ecdsa": ECDSA keys using NIST P-256 curve
    /// </remarks>
    [property: SerdeMemberOptions(Rename = "keytype")]
    public string KeyType { get; init; } = "";
    
    /// <summary>
    /// The cryptographic signature scheme used with this key.
    /// </summary>
    /// <remarks>
    /// Common schemes:
    /// - "rsassa-pss-sha256": RSA PSS with SHA-256
    /// - "ed25519": Ed25519 signature scheme
    /// - "ecdsa-sha2-nistp256": ECDSA with SHA-256 and NIST P-256
    /// </remarks>
    [property: SerdeMemberOptions(Rename = "scheme")]
    public string Scheme { get; init; } = "";
    
    /// <summary>
    /// The public key value containing the cryptographic material.
    /// </summary>
    [property: SerdeMemberOptions(Rename = "keyval")]
    public KeyValue KeyVal { get; init; } = new();
}

/// <summary>
/// Represents a signature object that pairs a key ID with the actual signature value.
/// Used in the signatures array of TUF metadata to indicate which key signed the metadata.
/// </summary>
/// <remarks>
/// From TUF specification: "Each signature object contains the identifier of the key 
/// used to generate the signature and the signature itself."
/// </remarks>
[GenerateSerde]
public partial record SignatureObject
{
    /// <summary>
    /// The identifier of the key that created this signature.
    /// Must match a key ID from the appropriate key store.
    /// </summary>
    [property: SerdeMemberOptions(Rename = "keyid")]
    public string KeyId { get; init; } = "";
    
    /// <summary>
    /// The hex-encoded signature value.
    /// </summary>
    [property: SerdeMemberOptions(Rename = "sig")]
    public string Sig { get; init; } = "";
}